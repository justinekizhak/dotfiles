#+TITLE: Dotfiles

[[https://img.shields.io/badge/Made_in-Doom_Emacs-blue?style=for-the-badge]]

#+BEGIN_SRC html
<a href="https://www.instagram.com/justinekizhak"><img src="https://i.imgur.com/G9YJUZI.png" alt="Instagram" align="right"></a>
<a href="https://twitter.com/justinekizhak"><img src="http://i.imgur.com/tXSoThF.png" alt="Twitter" align="right"></a>
<a href="https://www.facebook.com/justinekizhak"><img src="http://i.imgur.com/P3YfQoD.png" alt="Facebook" align="right"></a>
#+END_SRC
-----

[[https://img.shields.io/badge/License-MIT-blue.svg]]
* Table of contents :TOC:
- [[#introduction][Introduction]]
- [[#features][Features]]
- [[#getting-started][Getting started]]
  - [[#what-is-devinstaller][What is Devinstaller?]]
  - [[#documentation][Documentation]]
  - [[#license][License]]

* Introduction

They say your dotfiles will most likely be the longest project you ever work on.
So for this reason, your dotfiles must be organized in a disciplined manner for
maintainability and extensibility.

My dotfiles are the direct reflection of my software development workflow and
practices of my past 3 years.

My dotfiles have undergone many transformation from single file vimrc to
forking someone else's to building a simple yet sophisticated structure for
housing more dotfiles.

One thing you may notice is that my workflow consists of diverse toolkit,
this makes it for easier adoption and exploration.

* Features

Contains settings for

- Emacs
  - Doom emacs
  - Spacemacs
- Vim
- Zsh
  - Zim framework
- Tmux
- Custom bash scripts
- Fonts
- VSCode (only install instructions for dotfiles)
- and some terminal settings

* Getting started

1. ~git clone https://gitlab.com/justinekizhak/dotfiles~
2. All the instructions are in =devfile.toml=. Use [[https://gitlab.com/devinstaller/devinstaller][devinstaller]] for installing the packages

** What is Devinstaller?

Devinstaller is a configuration file handler. It is not your regular config file.

Regular config files are static, they define the instructions and some other utility runs the instructions.
Devinstaller goes above and beyond this. Devinstaller not only knows what instructions but also which
instructions should be run

Devinstaller config consists of 2 files and the devinstaller app

1. The specification file
2. The program file

The specification file is your static, declarative config file but with supports for both python and shell scripting.
The specification file is also equipped with hooks, which can change pre defined instructions while
it is being run.

Not just that based on the platform it is being run it can change the course of the installation procedure.

** Documentation

Each application has their own documentation in their folders.

| Application | Documentation path                                                   |
|-------------+----------------------------------------------------------------------|
| Doom Emacs  | [[https://gitlab.com/justinekizhak/dotfiles/-/tree/master/emacs/doom.d]] |

/Remaining docs are WIP/

** License

Licensed under the terms of [[file:LICENSE.org][MIT License]]

-----
#+BEGIN_SRC markdown
[![forthebadge](https://forthebadge.com/images/badges/compatibility-betamax.svg)](https://forthebadge.com)
[![forthebadge](https://forthebadge.com/images/badges/powered-by-water.svg)](https://forthebadge.com)
[![forthebadge](https://forthebadge.com/images/badges/built-with-love.svg)](https://forthebadge.com)
#+END_SRC
-----
